Test cases for 1-my_list
=======================

That prints the list, but sorted (ascending sort)
You can assume that all the elements of the list will be of type int

Usage
=====

importing the class or object

    >>> MyList = __import__('1-my_list').MyList

Testing when the list is all interger
    >>> my_list = MyList()
    >>> my_list.append(8)
    >>> my_list.append(2)
    >>> my_list.append(5)
    >>> my_list.append(1)
    >>> print(my_list)
    [8, 2, 5, 1]
    >>> my_list.print_sorted()
    [1, 2, 5, 8]

Testing for when the list contain float and int
    >>> my_list = MyList()
    >>> my_list.append(0.2)
    >>> my_list.append(2)
    >>> my_list.append(1.5)
    >>> my_list.append(3.4)
    >>> print(my_list)
    [0.2, 2, 1.5, 3.4]
    >>> my_list.print_sorted()
    [0.2, 1.5, 2, 3.4]

Testing for when the list is a tuple with int
    >>> tuple_list = (2, 7, 1, 5)
    >>> my_list = MyList(tuple_list)
    >>> print(my_list)
    [2, 7, 1, 5]
    >>> my_list.print_sorted()
    [1, 2, 5, 7]

Testing when list contain string
    >>> list = [2, "e", "f", 6]
    >>> my_list = MyList(list)
    >>> print(my_list)
    [2, 'e', 'f', 6]
    >>> my_list.print_sorted()
    Traceback (most recent call last):
    	      ...
    TypeError: '<' not supported between instances of 'str' and 'int'

