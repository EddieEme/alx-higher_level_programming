Test cases for 0-add_integer module
===================================

The 0-add_integer module takes two integer or float as an argument and return their sum

Usage
=====

Import the function from the module:
        >>> add_integer = __import__('0-add_integer').add_integer

Testing for two possitive integers (a = 3 and b = 1)
        >>> add_integer(3, 1)
        4

Testing for one positive and one negetive integer (a = 15 and b = -4)
        >>> add_integer(15, -4)
        11

Testing for two negetive number (a = -15 and b = -4)
        >>> add_integer(-15, -4)
        -19

Testing for two integer, where a is 2 and b is the default value 98 (a =2 and b=98)
        >>> add_integer(2)
        100

Testing for positive float and a positive integer (a = 2.5 and b = 5)
    >>> add_integer(2.5, 5)
    7

Testing for float and an integer where the integer is equal to the default value of b (a = 2.5 and b = 98)
    >>> add_integer(2.5)
    100

Testing for positive float and a negative integer (a = 10.5 and b = -2)
	    >>> add_integer(10.5, -2)
	    8

Adding two negative floats (a = -10.5 and b = -2)
	    >>> add_integer(-10.5, -2)
	    -12

Testing forn integer number and a string (a = 4 and b = "School")
    >>> add_integer(4, "School")
    Traceback (most recent call last):
	      ...
    TypeError: b must be an integer

Passing no argument to the function
    >>> add_integer(None)
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Testing for letter and a number (a = 'c' and b = 1)
    >>> add_integer('c', 1)
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding two letters (a = 'c' and b = 'm')
    >>> add_integer('c', 'm')
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Testing for tuple
    >>> add_integer((1, 1))
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Testing for number and a list
    >>> add_integer(123, [])
    Traceback (most recent call last):
	      ...
    TypeError: b must be an integer

Passing a only one string
    >>> add_integer("Hello")
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Adding two float numbers (a = 1.2 and b = 4.2)
    >>> add_integer(1.2, 4.2)
    5

Case Overflow:

    >>> add_integer(float('inf'), 0)
    Traceback (most recent call last):
    	      ...
    OverflowError: cannot convert float infinity to integer

Case NaN 1:

    >>> add_integer(0, float('nan'))
    Traceback (most recent call last):
    	      ...
    ValueError: cannot convert float NaN to integer
